// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/speakeasy-api/easytemplate/internal/template (interfaces: VM)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	goja "github.com/dop251/goja"
	gomock "github.com/golang/mock/gomock"
	vm "github.com/speakeasy-api/easytemplate/internal/vm"
)

// MockVM is a mock of VM interface.
type MockVM struct {
	ctrl     *gomock.Controller
	recorder *MockVMMockRecorder
}

// MockVMMockRecorder is the mock recorder for MockVM.
type MockVMMockRecorder struct {
	mock *MockVM
}

// NewMockVM creates a new mock instance.
func NewMockVM(ctrl *gomock.Controller) *MockVM {
	mock := &MockVM{ctrl: ctrl}
	mock.recorder = &MockVMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVM) EXPECT() *MockVMMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockVM) Get(arg0 string) goja.Value {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(goja.Value)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockVMMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVM)(nil).Get), arg0)
}

// Run mocks base method.
func (m *MockVM) Run(arg0 context.Context, arg1, arg2 string, arg3 ...vm.Option) (goja.Value, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Run", varargs...)
	ret0, _ := ret[0].(goja.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockVMMockRecorder) Run(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockVM)(nil).Run), varargs...)
}

// Set mocks base method.
func (m *MockVM) Set(arg0 string, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockVMMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockVM)(nil).Set), arg0, arg1)
}

// ToObject mocks base method.
func (m *MockVM) ToObject(arg0 goja.Value) *goja.Object {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToObject", arg0)
	ret0, _ := ret[0].(*goja.Object)
	return ret0
}

// ToObject indicates an expected call of ToObject.
func (mr *MockVMMockRecorder) ToObject(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToObject", reflect.TypeOf((*MockVM)(nil).ToObject), arg0)
}
